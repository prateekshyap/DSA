/* https://leetcode.com/problems/product-of-array-except-self/
 * 238. Product of Array Except Self
 * 
 https://practice.geeksforgeeks.org/problems/product-array-puzzle4525/1
 */
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        
        int n = nums.size();
        vector<int> ans(n, 1);
        int pre=1, suf=1;
        for(int i=0; i<n; i++)
        {
            ans[i] *= pre;
            pre *= nums[i];
            ans[n-1-i] *= suf;
            suf *= nums[n-1-i];
        }
        return ans;
        
    }
    
    /*
    
    vector<int> productExceptSelf(vector<int>& nums) {
        
       int n = nums.size();
        vector<int> ans(n, 1);
        for(int i=1; i<n; i++)
        {
            ans[i] = ans[i-1] * nums[i-1];
        }
        for(int i=n-1, suffixProd=1; i>=0; i--)
        {
            ans[i] *= suffixProd;
            suffixProd *= nums[i];
        }
        
        return ans;
        
    }
    //_UsingPrefixSuffix
    vector<int> productExceptSelf(vector<int>& nums) {
        
       int n = nums.size();
        vector<int> ans(n), pre(n), suf(n);
        partial_sum(nums.begin(), nums.end(), pre.begin(), multiplies<int>());
        partial_sum(nums.rbegin(), nums.rend(), suf.rbegin(), multiplies<int>());
        
        // for(int i=0; i<n; i++)
        //      cout<<pre[i]<<" ";
        // cout<<endl;
        //  for(int i=0; i<n; i++)
        //      cout<<suf[i]<<" ";
        // cout<<endl;
        
        ans[0] = suf[1];
        ans[n-1] = pre[n-2];
        for(int i=1; i<n-1; i++)
             ans[i] = pre[i-1] * suf[i+1];
           
        return ans;
        
    }
    
     vector<int> productExceptSelf_UsingDivision(vector<int>& nums) {
        
        int prod = 1;
        int cntz=0, indz=0;
        int n = nums.size();
        
        vector<int> ans(n, 0);
        
        for(int i=0; i<n; i++)
        {
            if(nums[i])
                prod *= nums[i];
            else
            {
                cntz++;
                indz=i;
            }
        }
        
        if(cntz>1)
            return ans;
        else if(cntz == 1)
        {
            ans[indz] = prod;
            return ans;
        }
        
        for(int i=0; i<n; i++)
        {
            ans[i] = prod/nums[i];
        }
        
        return ans;
        
    }
    */
};